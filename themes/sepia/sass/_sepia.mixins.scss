// =============================================================================
// Mixins
// =============================================================================
//

// -----------------------------------------------------------------------------
// Variables
// -----------------------------------------------------------------------------
//
$prefixes: ("-webkit-","-moz-", "-o-", "");


// **
// Typography
// **
//
@mixin font-bold() {
  font-family: $font-bold;
  font-weight: $theme-font-weight-bold;
}


// -----------------------------------------------------------------------------
// Mixin for ::selection, which allows specify selected text background color
// ----------------------------------------------------------------------------- 
//
// $color - The color for the selected text.
// $background - The background color for the selected text.
//
@mixin selection($color, $background) {
  @each $prefix in $prefixes {
    ::#{$prefix}selection {
      color: $color;
      background: $background;
    }
  }
}


// **
// Pseudo arrow
// **
// Usage example: pseudo-arrow(10px, #000, top, center, $offset: 20px)
@mixin pseudo-arrow($size, $color, $direction, $alignment, $offset: 20px) {

  border: $size solid transparent;
  content: "";
  height: 0;
  position: absolute;
  width: 0;

  // Place the arrow based on $direction
  #{$direction}: -$size * 2;

  // Set the border-color based on $direction
  border-#{opposite-position($direction)}-color: $color;

  // Place the arrow based on alignment (center/middle or $offset)
  @if ($alignment == "center") {

    margin-left: -$size;
    left: 50%;

  } @else if $alignment == "middle" {

    margin-top: -$size;
    top: 50%;

  } @else {

    #{$alignment}: $offset;

  }
}


// -----------------------------------------------------------------------------
// Mixin for transparent backgrounds, maing it cross browser compatible
// ----------------------------------------------------------------------------- 
// 
// including IE8+. (https://gist.github.com/1949202)
//
// $color - The color of the background.
// $alpha - The alpha value for transparency.
//
@mixin rgba-background($color, $alpha) {
  $rgba: rgba($color, $alpha);
  // IE fallback
  background-color: $color;
  background-color: $rgba;
}


// **
// Box sizing
// **
//
@mixin box-sizing($bs) {
  $bs: unquote($bs);
  @include experimental(box-sizing, $bs,
    -moz, -webkit, not -o, not -ms, not -khtml, official
  );
  @if $box-sizing-polyfill-path != "" {
    *behavior: url($box-sizing-polyfill-path);
  }
}


// -----------------------------------------------------------------------------
// Mixin that converts pixel values to rem values
// ----------------------------------------------------------------------------- 
//
// https://github.com/ry5n/rem
//
// Returns two lines of code â€” one of the regular pixel values (for older 
// browsers), and another with the converted rem values (for everything else).
//
// Basic usage: @include rem('padding',10px 0 2px 5px);
//              @include rem('font-size',10px);
//
@mixin rem($property, $px-values) {
  // Convert the baseline into rems
  $baseline-rem: $base-font-size / 1rem;
  // Print the first line in pixel values
  #{$property}: $px-values;
  // If there is only one (numeric) value, return the property/value line for it.
  @if type-of($px-values) == "number" {
    #{$property}: $px-values / $baseline-rem;
  }
  @else {
    // Create an empty list that we can dump values into
    $rem-values: unquote("");
    @each $value in $px-values {
      // If the value is zero, return 0
      @if $value == 0 {
        $rem-values: append($rem-values, $value);
      }
      @else {
        $rem-values: append($rem-values, $value / $baseline-rem);
      }
    }
    // Return the property and its list of converted values
    #{$property}: $rem-values;
  }
}
